{"version":3,"sources":["utils.js","Colosseum.js","components/NotSupportedModal.js","components/UnitNumberInput.js","components/StatusInput.js","converters/calculate.js","converters/UnitNumber.js","converters/FlowRate.js","converters/Time.js","converters/Tube.js","converters/Volume.js","ColosseumUI.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["sleep","ms","Promise","r","setTimeout","promiseTimeout","promise","message","rejectPromise","resolve","reject","race","serialOptions","baudRate","dataBits","stopBits","parity","bufferSize","flowControl","serialFilters","usbVendorId","serialTimeout","connectResponse","setupCommands","angles","commandRegex","responseIsValid","command","response","match","Colosseum","dry","connect","_connect","disconnect","_disconnect","send","_send","this","serial","BrowserSerial","reader","readLineGenerator","connected","ready","paused","stopped","done","error","startTime","position","numberOfFractions","interval","callback","doneCallback","errorCallback","a","next","value","Error","write","sendAndVerify","Date","now","resume","_","isNil","angle","then","catch","NotSupportedModal","props","state","show","Modal","centered","size","Header","closeButton","Title","icon","faExclamationTriangle","Body","href","Footer","Row","Col","Button","variant","onClick","setState","React","Component","allowedChars","UnitNumberInput","unit","invalid","unitNumber","units","includes","isFunction","validator","isNaN","toString","onChange","validChars","every","char","numPeriods","sumBy","floatValue","parseFloat","onValueChange","onUnitChange","inputDisabled","disabled","dropdownDisabled","className","Form","Label","label","Control","placeholder","event","target","readOnly","isInvalid","Feedback","type","Dropdown","Toggle","Menu","map","Item","eventKey","onSelect","defaultProps","StatusInput","Group","_flowRateUnit","_totalTimeUnit","_volumePerFractionUnit","_totalVolumeUnit","_numberOfFractionsUnit","calculateTotalVolume","flowRate","totalTime","Volume","calculateNumberOfFractions","totalVolume","volumePerFraction","UnitNumber","calculateVolumePerFraction","calculateTotalTime","Time","conversionFactors","unit1","unit2","has","isNumber","isEmpty","constructor","places","isInteger","floor","FlowRate","Tube","tubeUnits","flowRateUnits","totalTimeUnits","volumePerFractionUnits","totalVolumeUnits","constructUnitNumberFactory","converter","constructTube","constructFlowRate","constructTime","constructVolume","constructUnitNumber","integerValidator","positiveValidator","webSerialSupported","navigator","statusTexts","0","1","2","3","4","5","statusVariants","selectionFunctions","totalVolumeUnit","numberOfFractionsUnit","_flowRate","convert","_totalTime","_volumePerFraction","_totalVolume","volumePerFractionUnit","_numberOfFractions","totalTimeUnit","otherSelections","tubeSizes","ColosseumUI","timeVolumeRadioSelection","volumeNumberRadioSelection","connectError","connecting","development","status","statusError","progress","devCommand","colosseum","monitorInterval","unitNumbers","numberOfTubes","notSupportedModal","createRef","unitNumberInputs","statusInputs","volumeDispensed","timeElapsed","tubeNumber","bind","update","validate","run","pause","stop","monitor","result","finally","console","log","clearInterval","timeUnit","volumeUnit","current","selection1","selection2","otherSelection1","otherSelection2","unitNumber1","unitNumber2","targetUnit1","targetUnit2","calculated","forEach","key","setUnitNumber","results","unitNumberInput","tubeSize","setup","setInterval","factory","isConnected","disableInputs","Container","as","ref","Check","name","checked","Alert","Badge","ProgressBar","animated","style","color","renderInputs","renderStatus","renderOther","urlParams","queryString","parse","window","location","search","isDevelopment","App","document","title","Navbar","bg","Brand","Collapse","Text","faGithub","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","get","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"6ZAAaA,EAAQ,SAAAC,GAAE,OAAI,IAAIC,SAAQ,SAAAC,GAAC,OAAIC,WAAWD,EAAGF,OAEnD,SAASI,EAAeC,EAASL,GAAmB,IAAfM,EAAc,uDAAN,KAC5CC,EAAgB,IAAIN,SAAQ,SAACO,EAASC,GAC1CN,YAAW,kBAAMM,EAAOH,GAAO,uBAAoBN,EAApB,WAA+BA,MAGhE,OAAOC,QAAQS,KAAK,CAACL,EAASE,ICAhC,IAAMI,EAAgB,CACpBC,SAAU,IACVC,SAAU,EACVC,SAAU,EACVC,OAAQ,OACRC,WAAY,IACZC,YAAa,QAITC,EAAgB,CAAEC,YAAa,MAE/BC,EAAgB,IAChBC,EAAkB,qBAClBC,EAAgB,CACpB,uCACA,wCAOIC,EAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1U,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGpBC,EAAe,WAIrB,SAASC,EAAgBC,EAASC,GAGhC,OAFqBD,EAAQE,MAAMJ,GAAc,KAC3BG,EAASC,MAAMJ,GAAc,GAK9C,IAAMK,EAAb,WACE,aAAwB,IAAD,OAAXC,EAAW,iFAiCvBC,QAAU,kBAAM3B,EAAe,EAAK4B,WAAYZ,EAAe,0BAjCxC,KAyCvBa,WAAa,kBAAM7B,EAAe,EAAK8B,cAAed,EAAe,6BAzC9C,KAmDvBe,KAAO,SAACT,GAAD,OAAatB,EAAe,EAAKgC,MAAMV,GAAUN,EAAtB,kBAAgDM,EAAhD,iBAlDhCW,KAAKP,IAAMA,EACXO,KAAKC,OAAS,IAAIC,gBAAc5B,EAAeO,GAE/CmB,KAAKG,OAASH,KAAKC,OAAOG,oBAC1BJ,KAAKK,UAAYZ,EACjBO,KAAKM,OAAQ,EACbN,KAAKO,QAAS,EACdP,KAAKQ,SAAU,EACfR,KAAKS,MAAO,EACZT,KAAKU,OAAQ,EACbV,KAAKW,UAAY,KAEjBX,KAAKY,SAAW,EAChBZ,KAAKa,kBAAoB,KACzBb,KAAKc,SAAW,KAChBd,KAAKe,SAAW,KAChBf,KAAKgB,aAAe,KACpBhB,KAAKiB,cAAgB,KAnBzB,mFAsBE,8BAAAC,EAAA,0DACMlB,KAAKP,IADX,yCACuBT,GADvB,uBAEQgB,KAAKC,OAAOP,UAFpB,uBAGyBM,KAAKG,OAAOgB,OAHrC,UAGQ7B,EAHR,QAIQ8B,EAAQ9B,EAAS8B,MAAMA,SACfpC,EALhB,uBAKuCqC,MAAM,uBAAD,OACjBD,EADiB,sBACEpC,EADF,+DAL5C,eASEgB,KAAKK,WAAY,EATnB,kBAUSe,GAVT,iDAtBF,sHAoCE,sBAAAF,EAAA,0DACMlB,KAAKP,IADX,oDAEOO,KAAKK,UAFZ,sBAE6BgB,MAAM,wBAFnC,uBAGQrB,KAAKC,OAAOL,aAHpB,OAIEI,KAAKK,WAAY,EAJnB,gDApCF,gHA6CE,WAAYhB,GAAZ,eAAA6B,EAAA,0DACMlB,KAAKP,IADX,yCACuBJ,GADvB,UAEOW,KAAKK,UAFZ,sBAE6BgB,MAAM,wBAFnC,uBAGQrB,KAAKC,OAAOqB,MAAMjC,GAH1B,uBAIyBW,KAAKG,OAAOgB,OAJrC,cAIQ7B,EAJR,yBAKSA,EAAS8B,MAAMA,OALxB,iDA7CF,yHAuDE,WAAoB/B,GAApB,eAAA6B,EAAA,sEACsBlB,KAAKF,KAAKT,GADhC,UACQ+B,EADR,OAEOhC,EAAgBC,EAAS+B,GAFhC,sBAE8CC,MAAM,uBAAD,OAAwBD,EAAxB,sBAA2C/B,EAA3C,MAFnD,gCAGS+B,GAHT,gDAvDF,iHAkEE,WACEP,EACAC,GAFF,qCAAAI,EAAA,yDAGEH,EAHF,+BAGW,kBAAM,MACfE,EAJF,+BAIgB,kBAAM,MACpBD,EALF,+BAKe,kBAAM,MAEdhB,KAAKK,UAPZ,sBAO6BgB,MAAM,wBAPnC,OAQErB,KAAKc,SAAWA,EAChBd,KAAKa,kBAAoBA,EACzBb,KAAKe,SAAWA,EAChBf,KAAKgB,aAAeA,EACpBhB,KAAKiB,cAAgBA,EAZvB,cAewBhC,GAfxB,kEAeaI,EAfb,kBAe6CW,KAAKuB,cAAclC,GAfhE,iJAiBEW,KAAKM,OAAQ,EAjBf,iEAlEF,iHAsFE,sBAAAY,EAAA,yDACOlB,KAAKK,UADZ,sBAC6BgB,MAAM,wBADnC,UAEOrB,KAAKM,MAFZ,sBAEyBe,MAAM,mDAF/B,UAGwB,IAAlBrB,KAAKY,SAHX,sBAGiCS,MAAM,8BAAD,OAA+BrB,KAAKY,WAH1E,cAIEZ,KAAKW,UAAYa,KAAKC,MAJxB,SAKQzB,KAAK0B,SALb,gDAtFF,yEA8FE,WACE1B,KAAKO,QAAS,IA/FlB,2DAkGE,iCAAAW,EAAA,yDACOlB,KAAKK,UADZ,sBAC6BgB,MAAM,wBADnC,WAEMrB,KAAKU,MAFX,sBAEwBW,MAAM,qCAF9B,WAGMM,IAAEC,MAAM5B,KAAKW,WAHnB,sBAGqCU,MAAM,gDAH3C,WAIMrB,KAAKQ,QAJX,sBAI0Ba,MAAM,uBAJhC,OAMErB,KAAKO,QAAS,EANhB,UAOUP,KAAKO,UAAUP,KAAKY,SAAWZ,KAAKa,oBAAsBb,KAAKU,MAPzE,wBAQIV,KAAKuB,eA7HSM,EA6HiB3C,EAAOc,KAAKY,UA7HxB,mBAAgBiB,EAAhB,YAAyBA,EAAzB,YAAkCA,EAAlC,OA8HhBC,MAAK,kBAAM,EAAKf,SAAS,EAAKH,aAC9BmB,OAAM,SAAArB,GACL,EAAKA,OAAQ,EACb,EAAKO,cAAc,EAAKL,SAAUF,MAEtCV,KAAKY,WAdT,UAgBUlD,EAAMsC,KAAKc,UAhBrB,+BAoBMd,KAAKY,UAAYZ,KAAKa,oBACxBb,KAAKS,MAAO,EACZT,KAAKgB,gBAtBT,kCArHkB,IAAAa,IAqHlB,YAlGF,+GA4HE,sBAAAX,EAAA,6DACElB,KAAKO,QAAS,EACdP,KAAKQ,SAAU,EAFjB,SAGQR,KAAKF,KAnJK,0BAgJlB,gDA5HF,6D,wBCvCakC,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAM,GAHS,EADrB,0CAQE,WAAU,IAAD,OACP,OACE,eAACC,EAAA,EAAD,CAAOD,KAAMnC,KAAKkC,MAAMC,KAAME,UAAQ,EAACC,KAAK,KAA5C,UACE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,eAACJ,EAAA,EAAMK,MAAP,WACE,cAAC,IAAD,CAAiBC,KAAMC,MADzB,gCAKF,eAACP,EAAA,EAAMQ,KAAP,WACE,0OAKA,8FAEQ,mBAAGC,KAAK,gFAAR,kBAFR,UAKF,cAACT,EAAA,EAAMU,OAAP,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAM,EAAKC,SAAS,CAACjB,MAAM,KAAhE,gCA/Bd,GAAuCkB,IAAMC,W,QCDvCC,EAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAK3DC,EAAb,kDAkBE,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXd,MAAO,GACPqC,KAAM,KACNC,QAAS,MAKX,EAAKtC,MAAQ,GACb,EAAKqC,KAAO,KACZ,EAAKC,QAAU,KAZE,EAlBrB,iDAiCE,SAAcC,GACZ,GAAKhC,IAAEC,MAAM5B,KAAKiC,MAAM2B,SAAWjC,IAAEC,MAAM+B,EAAWF,QAAW9B,IAAEkC,SAAS7D,KAAKiC,MAAM2B,MAAOD,EAAWF,MACvG,MAAMpC,MAAM,QAAD,OAASsC,EAAWF,KAApB,mBAAmCzD,KAAKiC,MAAM2B,QAC3D,IAAMF,EAAU/B,IAAEmC,WAAW9D,KAAKiC,MAAM8B,aAAepC,IAAEqC,MAAML,EAAWvC,OACtEpB,KAAKiC,MAAM8B,UAAUJ,EAAWvC,OAChC,KACJpB,KAAKoB,MAAQuC,EAAWvC,MACxBpB,KAAKyD,KAAOE,EAAWF,KACvBzD,KAAK0D,QAAUA,EACf1D,KAAKoD,SAAS,CACZhC,MAAOO,IAAEqC,MAAML,EAAWvC,OAAS,GAAKuC,EAAWvC,MAAM6C,WACzDR,KAAME,EAAWF,KACjBC,QAASA,MA7Cf,+BAoDE,WACO/B,IAAEC,MAAM5B,KAAKiC,MAAM2B,SACtB5D,KAAKyD,KAAOzD,KAAKiC,MAAM2B,MAAM,GAC7B5D,KAAKoD,SAAS,CAACK,KAAMzD,KAAKiC,MAAM2B,MAAM,QAvD5C,sBA2DE,SAASxC,EAAOqC,GACd9B,IAAEmC,WAAW9D,KAAKiC,MAAMiC,WAAalE,KAAKiC,MAAMiC,SAAS9C,EAAOqC,KA5DpE,2BA+DE,SAAcrC,GACZ,IAAM+C,EAAaxC,IAAEyC,MAAMhD,GAAO,SAAAiD,GAAI,OAAI1C,IAAEkC,SAASN,EAAcc,MAC7DC,EAAa3C,IAAE4C,MAAMnD,GAAO,SAAAiD,GAAI,MAAa,MAATA,KAC1C,GAAKF,KAAcG,EAAa,GAAhC,CACA,IAAME,EAAaC,WAAWrD,GACxBsC,EAAU/B,IAAEmC,WAAW9D,KAAKiC,MAAM8B,aAAepC,IAAEqC,MAAMQ,GAC3DxE,KAAKiC,MAAM8B,UAAUS,GACrB,KACJ7C,IAAEmC,WAAW9D,KAAKiC,MAAMyC,gBAAkB1E,KAAKiC,MAAMyC,cAAcF,GACnExE,KAAKoB,MAAQA,EACbpB,KAAK0D,QAAUA,EACf1D,KAAKoD,SAAS,CAAChC,MAAOA,EAAOsC,QAASA,IACtC1D,KAAKkE,SAASM,EAAYxE,KAAKkC,MAAMuB,SA3EzC,0BA8EE,SAAaA,GACX,IAAMe,EAAaC,WAAWzE,KAAKkC,MAAMd,OACzCpB,KAAKyD,KAAOA,EACZzD,KAAKoD,SAAS,CAACK,KAAMA,IACrB9B,IAAEmC,WAAW9D,KAAKiC,MAAM0C,eAAiB3E,KAAKiC,MAAM0C,aAAaH,GACjExE,KAAKkE,SAASM,EAAYf,KAnF9B,oBAsFE,WAAU,IAAD,OACDmB,EAAgB5E,KAAKiC,MAAM2C,eAAiB5E,KAAKiC,MAAM4C,SACvDC,EAAmB9E,KAAKiC,MAAM6C,kBAAoB9E,KAAKiC,MAAM4C,SACnE,OACE,qCACE,cAAC7B,EAAA,EAAD,CAAK+B,UAAU,QAAf,SACE,cAACC,EAAA,EAAKC,MAAN,CACEF,UAAWH,GAAiB,aAD9B,SAGG5E,KAAKiC,MAAMiD,UAGhB,eAAClC,EAAA,EAAD,WACE,cAACgC,EAAA,EAAKG,QAAN,CACEC,YAAapF,KAAKiC,MAAMmD,YACxBhE,MAAOpB,KAAKkC,MAAMd,MAClB8C,SAAU,SAAAmB,GAAK,OAAI,EAAKX,cAAcW,EAAMC,OAAOlE,QACnDmE,SAAUX,EACVY,WAAY7D,IAAEC,MAAM5B,KAAKkC,MAAMwB,WAEjC,cAACsB,EAAA,EAAKG,QAAQM,SAAd,CAAuBC,KAAK,UAA5B,SACG1F,KAAKkC,MAAMwB,cAGd/B,IAAEC,MAAM5B,KAAKiC,MAAM2B,QACnB,cAACZ,EAAA,EAAD,CAAK+B,UAAU,QAAf,SACE,eAACY,EAAA,EAAD,WACE,cAACA,EAAA,EAASC,OAAV,CACE1C,QAAQ,kBACR6B,UAAU,QACVF,SAAUC,EAHZ,SAKG9E,KAAKkC,MAAMuB,MAAQ,SAEtB,cAACkC,EAAA,EAASE,KAAV,UACGlE,IAAEmE,IAAI9F,KAAKiC,MAAM2B,OAAO,SAAAH,GAAI,OAC3B,cAACkC,EAAA,EAASI,KAAV,CAEEC,SAAUvC,EACVwC,SAAU,SAACD,EAAUX,GAAX,OAAqB,EAAKV,aAAaqB,IAHnD,SAIEvC,GAHKA,oBA3HzB,GAAqCJ,IAAMC,WAA9BE,EAaJ0C,aAAe,CACpBtB,eAAe,EACfE,kBAAkB,GCrBf,IAAMqB,EAAb,kDAKE,WAAYlE,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXd,MAAO,IAHQ,EALrB,0CAYE,WACE,OACE,eAAC4D,EAAA,EAAKoB,MAAN,WACE,cAACpB,EAAA,EAAKC,MAAN,UAAajF,KAAKiC,MAAMiD,QACxB,cAACF,EAAA,EAAKG,QAAN,CACEO,KAAK,OACLN,YAAY,GACZhE,MAAOpB,KAAKkC,MAAMd,MAClBmE,UAAQ,WApBlB,GAAiClC,IAAMC,WCIjC+C,EAAgB,SAChBC,EAAiB,MACjBC,EAAyB,KACzBC,GAAmB,KACnBC,GAAyB,KAGzBC,GAAuB,SAACC,EAAUC,GAAX,OAC3B,IAAIC,GAAOD,EAAUxF,MAAQuF,EAASvF,MAAOoF,KACzCM,GAA6B,SAACC,EAAaC,GAAd,OACjC,IAAIC,GAAWF,EAAY3F,MAAQ4F,EAAkB5F,MAAOqF,KACxDS,GAA6B,SAACH,EAAalG,GAAd,OACjC,IAAIgG,GAAOE,EAAY3F,MAAQP,EAAkBO,MAAOmF,IACpDY,GAAqB,SAACR,EAAUI,GAAX,OACzB,IAAIK,GAAKL,EAAY3F,MAAQuF,EAASvF,MAAOkF,ICfxC,IAAMW,GAAb,WAGE,WAAY7F,EAAOqC,GAAuC,IAAjCG,EAAgC,uDAA1B,GAAIyD,EAAsB,uDAAJ,GAAI,wCAEnCzD,GAFmC,IAEvD,2BAA2B,CAAC,IAAD,EAAhB0D,EAAgB,sBACL1D,GADK,IACzB,2BAA2B,CAAC,IAAjB2D,EAAgB,QACzB,GAAID,IAAUC,IAAU5F,IAAE6F,IAAIH,EAAmB,CAACC,EAAOC,IACvD,MAAMlG,MAAM,sCAAD,OAAuCiG,EAAvC,aAAiDC,KAHvC,gCAF4B,8BAWvD,IAAK5F,IAAE8F,SAASrG,GAAQ,MAAMC,MAAM,mCAAD,OAAoCD,IAGvE,IAAKO,IAAE+F,QAAQ9D,KAAWjC,IAAEkC,SAASD,EAAOH,GAC1C,MAAMpC,MAAM,uBAAD,OAAwBM,IAAEsC,SAASL,GAAnC,qBAAsDH,IAInE,GAAI9B,IAAE+F,QAAQ9D,KAAWjC,IAAEC,MAAM6B,GAC/B,MAAMpC,MAAM,sCAAD,OAAuCoC,IAGpDzD,KAAK4D,MAAQA,EACb5D,KAAKqH,kBAAoBA,EACzBrH,KAAKoB,MAAQA,EACbpB,KAAKyD,KAAOA,EA7BhB,2CAiCE,SAAQA,GACN,GAAK9B,IAAEC,MAAM5B,KAAKyD,OAAS9B,IAAEC,MAAM5B,KAAKyD,OAAUA,IAASzD,KAAKyD,KAC9D,OAAO,IAAIzD,KAAK2H,YAAY3H,KAAKoB,MAAOpB,KAAKyD,MAG/C,IAAK9B,IAAEkC,SAAS7D,KAAK4D,MAAOH,GAC1B,MAAMpC,MAAM,uBAAD,OAAwBM,IAAEsC,SAASjE,KAAK4D,OAAxC,qBAA2DH,IAGxE,OAAO,IAAIzD,KAAK2H,YACd3H,KAAKqH,kBAAkBrH,KAAKyD,MAAMA,GAAQzD,KAAKoB,MAAOqC,KA3C5D,sBA8CE,WAAuB,IAAdmE,EAAa,uDAAN,KACRxG,EAAQO,IAAEkG,UAAUD,IAAWA,EAAS,EAAIjG,IAAEmG,MAAM9H,KAAKoB,MAAOwG,GAAU5H,KAAKoB,MACrF,OAAOO,IAAEC,MAAM5B,KAAKyD,MAAb,UAAwBrC,GAAxB,UAAqCA,EAArC,YAA8CpB,KAAKyD,UAhD9D,KCLMG,GAAQ,CAAC,SAAU,SAAU,QAAS,SAAU,SAAU,SAC1DyD,GAAoB,CACxB,SAAU,CACR,SAAU,GACV,QAAU,KACV,SAAU,KACV,SAAU,IACV,QAAU,KAEZ,SAAU,CACR,SAAU,EAAI,GACd,QAAU,GACV,SAAU,MACV,SAAU,KACV,QAAU,KAEZ,QAAS,CACP,SAAU,EAAI,KACd,SAAU,EAAI,GACd,SAAU,OACV,SAAU,MACV,QAAU,MAEZ,SAAU,CACR,SAAU,IACV,SAAU,IACV,QAAU,KACV,SAAU,GACV,QAAU,MAEZ,SAAU,CACR,SAAU,IAAO,GACjB,SAAU,IACV,QAAU,IACV,SAAU,EAAI,GACd,QAAU,IAEZ,QAAS,CACP,SAAU,IAAO,KACjB,SAAU,IAAO,GACjB,QAAU,IACV,SAAU,EAAI,KACd,SAAU,EAAI,KAILU,GAAb,kDACE,WAAY3G,EAAOqC,GAAO,uCAClBrC,EAAOqC,EAAMG,GAAOyD,IAF9B,UAA8BJ,IC9CxBrD,GAAQ,CAAC,KAAM,MAAO,MAAO,MAC7ByD,GAAoB,CACxB,GAAO,CACL,IAAO,KACP,IAAO,MACP,GAAO,QAET,IAAQ,CACN,GAAQ,IACR,IAAQ,EAAI,GACZ,GAAQ,EAAI,MAEd,IAAQ,CACN,GAAQ,IACR,IAAQ,GACR,GAAQ,EAAI,IAEd,GAAO,CACL,GAAQ,KACR,IAAQ,KACR,IAAQ,KAICD,GAAb,kDACE,WAAYhG,EAAOqC,GAAO,uCAClBrC,EAAOqC,EAAMG,GAAOyD,IAF9B,UAA0BJ,ICxBpBrD,GAAQ,CAAC,SAAU,SAAU,UAC7ByD,GAAoB,CACxB,SAAU,CACR,SAAU,KACV,SAAW,MAEb,SAAU,CACR,SAAU,KACV,SAAW,MAEb,SAAU,CACR,SAAU,KACV,SAAU,OAIDW,GAAb,kDACE,WAAY5G,EAAOqC,GAAO,uCAClBrC,EAAOqC,EAAMG,GAAOyD,IAF9B,UAA0BJ,IChBpBrD,GAAQ,CAAC,KAAM,KAAM,KACrByD,GAAoB,CACxB,GAAO,CACL,GAAO,KACP,EAAO,MAET,GAAO,CACL,GAAO,IACP,EAAO,MAET,EAAM,CACJ,GAAO,IACP,GAAO,MAIER,GAAb,kDACE,WAAYzF,EAAOqC,GAAO,uCAClBrC,EAAOqC,EAAMG,GAAOyD,IAF9B,UAA4BJ,ICgBtBgB,GAAY,CAAC,SAAU,SAAU,UACjCC,GAAgB,CAAC,SAAU,SAAU,QAAS,SAAU,SAAU,SAClEC,GAAiB,CAAC,MAAO,MAAO,MAChCC,GAAyB,CAAC,KAAM,MAChCC,GAAmB,CAAC,KAAM,KAAM,KAEhCC,GAA6B,SAACC,EAAWnH,EAAOqC,GAAnB,OACjC9B,IAAEqC,MAAM5C,GAAS,KAAO,IAAImH,EAAUnH,EAAOqC,IACzC+E,GAAgB,SAACpH,EAAOqC,GAAR,OAAiB6E,GAA2BN,GAAM5G,EAAOqC,IACzEgF,GAAoB,SAACrH,EAAOqC,GAAR,OAAiB6E,GAA2BP,GAAU3G,EAAOqC,IACjFiF,GAAgB,SAACtH,EAAOqC,GAAR,OAAiB6E,GAA2BlB,GAAMhG,EAAOqC,IACzEkF,GAAkB,SAACvH,EAAOqC,GAAR,OAAiB6E,GAA2BzB,GAAQzF,EAAOqC,IAC7EmF,GAAsB,SAACxH,EAAOqC,GAAR,OAAiB6E,GAA2BrB,GAAY7F,EAAOqC,IAErFoF,GAAmB,SAAAzH,GAAK,OAAIO,IAAEkG,UAAUzG,GAAS,KAAO,8BACxD0H,GAAoB,SAAA1H,GAAK,OAAIA,EAAQ,EAAI,KAAO,4BAGhD2H,GAAqB,WAAYC,UACjCC,GAAc,CAClBC,EAAG,cACHC,EAAG,UACHC,EAAG,SACHC,EAAG,UACHC,EAAG,OACHC,EAAG,SAECC,GAAiB,CACrBN,EAAG,SACHC,EAAG,OACHC,EAAG,UACHC,EAAG,SACHC,EAAG,UACHC,EAAG,UAECE,GAAqB,CACzB7C,UAAW,CACTI,kBN/CG,SACLL,EAAUC,EAAWI,GAEpB,IADD0C,EACA,uDADgBlD,GAAkBmD,EAClC,uDADwDlD,GAElDmD,EAAYjD,EAASkD,QAAQxD,GAC7ByD,EAAalD,EAAUiD,QAAQvD,GAC/ByD,EAAqB/C,EAAkB6C,QAAQtD,GAE/CyD,EAAetD,GAAqBkD,EAAWE,GAC/C/C,EAAciD,EAAaH,QAAQH,GACnC7I,EAAoBiG,GACxBkD,EAAcD,GACdF,QAAQF,GACV,MAAO,CAAC5C,cAAalG,sBMmCnBA,kBNhCG,SACL8F,EAAUC,EAAW/F,GAEpB,IADD6I,EACA,uDADgBlD,GAAkByD,EAClC,uDADwD1D,EAElDqD,EAAYjD,EAASkD,QAAQxD,GAC7ByD,EAAalD,EAAUiD,QAAQvD,GAC/B4D,EAAqBrJ,EAAkBgJ,QAAQpD,IAE/CuD,EAAetD,GAAqBkD,EAAWE,GAC/C/C,EAAciD,EAAaH,QAAQH,GACnC1C,EAAoBE,GACxB8C,EAAcE,GACdL,QAAQI,GACV,MAAO,CAAClD,cAAaC,uBMqBrBD,YAAa,CACXC,kBNnBG,SACLL,EAAUI,EAAaC,GAEtB,IADDmD,EACA,uDADc7D,EAAgBqD,EAC9B,uDADoDlD,GAE9CmD,EAAYjD,EAASkD,QAAQxD,GAC7B2D,EAAejD,EAAY8C,QAAQrD,IACnCuD,EAAqB/C,EAAkB6C,QAAQtD,GAE/CK,EAAYO,GAAmByC,EAAWI,GAAcH,QAAQM,GAChEtJ,EAAoBiG,GACxBkD,EAAcD,GACdF,QAAQF,GACV,MAAO,CAAC/C,YAAW/F,sBMQjBA,kBNLG,SACL8F,EAAUI,EAAalG,GAEtB,IADDsJ,EACA,uDADc7D,EAAgB2D,EAC9B,uDADoD1D,EAE9CqD,EAAYjD,EAASkD,QAAQxD,GAC7B2D,EAAejD,EAAY8C,QAAQrD,IACnC0D,EAAqBrJ,EAAkBgJ,QAAQpD,IAE/CG,EAAYO,GAAmByC,EAAWI,GAAcH,QAAQM,GAChEnD,EAAoBE,GACxB8C,EAAcE,GACdL,QAAQI,GACV,MAAO,CAACrD,YAAWI,wBMHfoD,GAAkB,CACtBxD,UAAW,cACXG,YAAa,YACbC,kBAAmB,oBACnBnG,kBAAmB,qBAEfwJ,GAAY,CAChB,SAAU,GACV,SAAU,EACV,SAAU,KAGCC,GAAb,kDAUE,WAAYrI,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAEXqI,yBAA0B,GAC1BC,2BAA4B,GAG5BC,aAAc,GACdC,YAAY,EACZrK,UAAW,EAAK4B,MAAM0I,aAAe,EAAK1I,MAAM5B,UAGhDuK,OAAQ,EACRC,YAAa,GACbC,SAAU,EAGVC,WAAY,IAId,EAAKC,UAAY,IAAIxL,EAAU,EAAKyC,MAAM0I,aAAe,EAAK1I,MAAM5B,WACpE,EAAK4K,gBAAkB,KAGvB,EAAKC,YAAc,CACjBC,cAAe,KACfxE,SAAU,KACVC,UAAW,KACXG,YAAa,KACbC,kBAAmB,KACnBnG,kBAAmB,MAIrB,EAAKuK,kBAAoB/H,IAAMgI,YAC/B,EAAKC,iBAAmB,CACtBH,cAAe9H,IAAMgI,YACrB1E,SAAUtD,IAAMgI,YAChBzE,UAAWvD,IAAMgI,YACjBtE,YAAa1D,IAAMgI,YACnBrE,kBAAmB3D,IAAMgI,YACzBxK,kBAAmBwC,IAAMgI,aAE3B,EAAKE,aAAe,CAClBC,gBAAiBnI,IAAMgI,YACvBI,YAAapI,IAAMgI,YACnBK,WAAYrI,IAAMgI,aAKpB,EAAK3L,QAAU,EAAKA,QAAQiM,KAAb,gBACf,EAAK/L,WAAa,EAAKA,WAAW+L,KAAhB,gBAClB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBACd,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,IAAM,EAAKA,IAAIH,KAAT,gBACX,EAAKI,MAAQ,EAAKA,MAAMJ,KAAX,gBACb,EAAKjK,OAAS,EAAKA,OAAOiK,KAAZ,gBACd,EAAKK,KAAO,EAAKA,KAAKL,KAAV,gBACZ,EAAKzH,SAAW,EAAKA,SAASyH,KAAd,gBAChB,EAAKM,QAAU,EAAKA,QAAQN,KAAb,gBA9DE,EAVrB,2CA2EE,WAAW,IAAD,OACR3L,KAAKoD,SAAS,CAACsH,YAAY,IAC3B1K,KAAKgL,UAAUtL,UACZoC,MAAK,SAAAoK,GAAM,OAAI,EAAK9I,SAAS,CAACqH,aAAc,GAAIpK,WAAW,OAC3D0B,OAAM,SAAArB,GAAK,OAAI,EAAK0C,SAAS,CAACqH,aAAc/J,EAAMuD,gBAClDkI,SAAQ,kBAAM,EAAK/I,SAAS,CAACsH,YAAY,SAhFhD,wBAmFE,WAAc,IAAD,OACX1K,KAAKgL,UAAUpL,aACZkC,MAAK,SAAAoK,GAAM,OAAI,EAAK9I,SAAS,CAACqH,aAAc,GAAIpK,WAAW,OAC3D0B,OAAM,SAAArB,GAAK,OAAI,EAAK0C,SAAS,CAACqH,aAAc/J,EAAMuD,kBAtFzD,kBAyFE,SAAK5E,GACH+M,QAAQC,IAAR,eAAoBhN,IACpBW,KAAKgL,UAAUlL,KAAKT,GACjByC,MAAK,SAAAxC,GAAQ,OAAI8M,QAAQC,IAAR,kBAAuBhN,SA5F/C,qBAiGE,WAEE,GAAIW,KAAKgL,UAAUvK,MAAQT,KAAKgL,UAAUtK,OAASV,KAAKgL,UAAUxK,QAChE8L,cAActM,KAAKiL,qBADrB,CAKA,IAAMQ,EAAc,IAAIrE,GAAK5F,KAAKC,MAAQzB,KAAKgL,UAAUrK,UAAW,MAAMkJ,QAAQ,OAC5E0C,EAAWvM,KAAKkL,YAAYtE,UAAUnD,KACtC+H,EAAkB,IAAI3E,GAC1B7G,KAAKkL,YAAYvE,SAASkD,QAAQ,UAAUzI,MAAQqK,EAAYrK,MAAO,MAEnEoL,EAAaxM,KAAKkL,YAAYnE,YAAYtD,KAEhDzD,KAAKuL,aAAaC,gBAAgBiB,QAAQrJ,SAAS,CACjDhC,MAAOoK,EAAgB3B,QAAQ2C,GAAYvI,SAAS,KAEtDjE,KAAKuL,aAAaE,YAAYgB,QAAQrJ,SAAS,CAC7ChC,MAAOqK,EAAY5B,QAAQ0C,GAAUtI,SAAS,QAnHpD,oBAuHE,WAAU,IAAD,OACDyI,EAAa1M,KAAKkC,MAAMqI,yBACxBoC,EAAa3M,KAAKkC,MAAMsI,2BACxBoC,EAAkBxC,GAAgBsC,GAClCG,EAAkBzC,GAAgBuC,GAElChG,EAAW3G,KAAKkL,YAAYvE,SAC5BmG,EAAc9M,KAAKkL,YAAYwB,GAC/BK,EAAc/M,KAAKkL,YAAYyB,GAC/BK,EAAchN,KAAKsL,iBAAiBsB,GAAiBH,QAAQhJ,KAC7DwJ,EAAcjN,KAAKsL,iBAAiBuB,GAAiBJ,QAAQhJ,KAGnE,KAAI9B,IAAEC,MAAM+E,IAAahF,IAAEC,MAAMkL,IAAgBnL,IAAEC,MAAMmL,IAAzD,CAEA,IAAMG,EAAazD,GAAmBiD,GAAYC,GAChDhG,EAAUmG,EAAaC,EAAaC,EAAaC,GAEnDtL,IAAEwL,QAAQD,GAAY,SAAC9L,EAAOgM,GAC5B,EAAKlC,YAAYkC,GAAOzL,IAAEqC,MAAM5C,EAAMA,OAAS,KAAOA,EACtD,EAAKkK,iBAAiB8B,GAAKX,QAAQY,cAAcjM,SA3IvD,sBA+IE,WAAY,IAAD,OACHkM,EAAU3L,IAAEmE,IAAI9F,KAAKkL,aAAa,SAAC9J,EAAOgM,GAC9C,IAAMG,EAAkB,EAAKjC,iBAAiB8B,GAAKX,QACnD,QAAK9K,IAAEC,MAAM2L,EAAgB7J,YACzB/B,IAAEC,MAAMR,KACVmM,EAAgBnK,SAAS,CAACM,QAAS,uBAC5B,OAKX,IAAK/B,IAAEyC,MAAMkJ,GAAU,OAAO,EAE9B,IAAMnC,EAAgBnL,KAAKkL,YAAYC,cAAc/J,MAC/CoM,EAAWxN,KAAKkL,YAAYC,cAAc1H,KAC1C5C,EAAoBb,KAAKkL,YAAYrK,kBAAkBO,MACvD4F,EAAoBhH,KAAKkL,YAAYlE,kBAAkB6C,QAAQ,MAAMzI,MAK3E,OAAIP,EAAoBsK,GACtBnL,KAAKsL,iBAAiBH,cAAcsB,QAAQrJ,SAAS,CACnDM,QAAQ,wBAAD,OAA0B7C,EAA1B,iCAEF,KAILmG,EAAoBqD,GAAUmD,MAChCxN,KAAKsL,iBAAiBH,cAAcsB,QAAQrJ,SAAS,CACnDM,QAAQ,wBAAD,OAA0BsD,EAA1B,8BAEF,KAhLb,iBAsLE,WAAO,IAAD,OACAhH,KAAK6L,YACP7L,KAAKgL,UAAUyC,MACbzN,KAAKkL,YAAYrK,kBAAkBO,MACnC,KACA,SAAAR,GACE,EAAK2K,aAAaG,WAAWe,QAAQrJ,SAAS,CAAChC,MAAOR,IACtD,EAAKwC,SAAS,CAAC0H,SAAWlK,EAAW,EAAKsK,YAAYrK,kBAAkBO,MAAS,SAEnF,SAACR,EAAUF,GAAX,OAAqB,EAAK0C,SAAS,CACjCyH,YAAY,qBAAD,OAAuBjK,EAAvB,aAAoCF,EAAMuD,YACrD2G,OAAQ,OAEV,kBAAM,EAAKxH,SAAS,CAACwH,OAAQ,OAE5B9I,MAAK,WACJ,EAAKkJ,UAAUc,MACf,EAAK1I,SAAS,CAACwH,OAAQ,IACvB,EAAKK,gBAAkByC,YAAY,EAAKzB,QAAS,QAElDlK,OAAM,SAAArB,GAAK,OAAI,EAAK0C,SAAS,CAACyH,YAAY,uBAAD,OAAyBnK,EAAMuD,mBA1MjF,mBA8ME,WACEjE,KAAKgL,UAAUe,QACf/L,KAAKoD,SAAS,CAACwH,OAAQ,MAhN3B,oBAmNE,WACE5K,KAAKgL,UAAUtJ,SACf1B,KAAKoD,SAAS,CAACwH,OAAQ,MArN3B,kBAyNE,WACE5K,KAAKgL,UAAUgB,OACfhM,KAAKoD,SAAS,CAACwH,OAAQ,MA3N3B,sBA+NE,SAASwC,EAAKO,EAASvM,EAAOqC,GAAoB,IAAdmI,IAAa,yDAC/C5L,KAAKkL,YAAYkC,GAAOO,EAAQvM,EAAOqC,GACvCmI,GAAU5L,KAAK4L,WAjOnB,+BAoOE,WAEO7C,KACH/I,KAAKoL,kBAAkBqB,QAAQrJ,SAAS,CAACjB,MAAM,IAC/CnC,KAAKoD,SAAS,CAACqH,aAAc,iDAI/BzK,KAAKoD,SAAS,CACZmH,yBAA0B,YAC1BC,2BAA4B,wBA9OlC,0BAmPE,SAAaoD,GAAc,IAAD,OAClBC,EAAgB7N,KAAKkC,MAAM0I,OAAS,EAC1C,OACE,eAACkD,EAAA,EAAD,WACE,cAAC9I,EAAA,EAAKoB,MAAN,CAAY2H,GAAIhL,IAAhB,SACE,cAAC,EAAD,CACEiL,IAAKhO,KAAKsL,iBAAiBH,cAC3BjG,MAAM,qCACNE,YAAY,UACZxB,MAAOqE,GACPpD,SAAUgJ,EACV9J,UAAW,SAAA3C,GAAK,OAAIyH,GAAiBzH,IAAU0H,GAAkB1H,IACjE8C,SAAU,SAAC9C,EAAOqC,GAAR,OAAiB,EAAKS,SAAS,gBAAiBsE,GAAepH,EAAOqC,GAAM,QAI1F,cAACuB,EAAA,EAAKoB,MAAN,CAAY2H,GAAIhL,IAAhB,SACE,cAAC,EAAD,CACEiL,IAAKhO,KAAKsL,iBAAiB3E,SAC3BzB,MAAM,YACNE,YAAY,YACZxB,MAAOsE,GACPrD,SAAUgJ,EACV9J,UAAW+E,GACX5E,SAAU,SAAC9C,EAAOqC,GAAR,OAAiB,EAAKS,SAAS,WAAYuE,GAAmBrH,EAAOqC,QAInF,uBAEA,eAACuB,EAAA,EAAKoB,MAAN,CAAY2H,GAAIhL,IAAhB,UACE,cAACiC,EAAA,EAAKiJ,MAAN,CACEvI,KAAK,QACLwI,KAAK,kBACL9M,MAAM,YACN+M,QAAiD,cAAxCnO,KAAKkC,MAAMqI,yBACpB1F,SAAU7E,KAAKkC,MAAM0I,OAAS,EAC9B1G,SAAU,SAAAmB,GAAK,OAAI,EAAKjC,SAAS,CAACmH,yBAA0BlF,EAAMC,OAAOlE,WAE3E,cAAC,EAAD,CACE4M,IAAKhO,KAAKsL,iBAAiB1E,UAC3B1B,MAAM,aACNE,YAAY,aACZxB,MAAOuE,GACPvD,cAAuD,cAAxC5E,KAAKkC,MAAMqI,yBAC1B1F,SAAUgJ,EACV9J,UAAW+E,GACX5E,SAAU,SAAC9C,EAAOqC,GAAR,OAAiB,EAAKS,SAAS,YAAawE,GAAetH,EAAOqC,SAIhF,eAACuB,EAAA,EAAKoB,MAAN,CAAY2H,GAAIhL,IAAhB,UACE,cAACiC,EAAA,EAAKiJ,MAAN,CACEvI,KAAK,QACLwI,KAAK,kBACL9M,MAAM,cACN+M,QAAiD,gBAAxCnO,KAAKkC,MAAMqI,yBACpB1F,SAAUgJ,EACV3J,SAAU,SAAAmB,GAAK,OAAI,EAAKjC,SAAS,CAACmH,yBAA0BlF,EAAMC,OAAOlE,WAE3E,cAAC,EAAD,CACE4M,IAAKhO,KAAKsL,iBAAiBvE,YAC3B7B,MAAM,eACNE,YAAY,eACZxB,MAAOyE,GACPzD,cAAuD,gBAAxC5E,KAAKkC,MAAMqI,yBAC1B1F,SAAUgJ,EACV9J,UAAW+E,GACX5E,SAAU,SAAC9C,EAAOqC,GAAR,OAAiB,EAAKS,SAAS,cAAeyE,GAAiBvH,EAAOqC,SAIpF,uBAEA,eAACuB,EAAA,EAAKoB,MAAN,CAAY2H,GAAIhL,IAAhB,UACE,cAACiC,EAAA,EAAKiJ,MAAN,CACEvI,KAAK,QACLwI,KAAK,oBACL9M,MAAM,oBACN+M,QAAmD,sBAA1CnO,KAAKkC,MAAMsI,2BACpB3F,SAAUgJ,EACV3J,SAAU,SAAAmB,GAAK,OAAI,EAAKjC,SAAS,CAACoH,2BAA4BnF,EAAMC,OAAOlE,WAE7E,cAAC,EAAD,CACE4M,IAAKhO,KAAKsL,iBAAiBtE,kBAC3B9B,MAAM,sBACNE,YAAY,sBACZxB,MAAOwE,GACPxD,cAAyD,sBAA1C5E,KAAKkC,MAAMsI,2BAC1B3F,SAAUgJ,EACV9J,UAAW+E,GACX5E,SAAU,SAAC9C,EAAOqC,GAAR,OAAiB,EAAKS,SAAS,oBAAqByE,GAAiBvH,EAAOqC,SAI1F,eAACuB,EAAA,EAAKoB,MAAN,CAAY2H,GAAIhL,IAAhB,UACE,cAACiC,EAAA,EAAKiJ,MAAN,CACEvI,KAAK,QACLwI,KAAK,oBACL9M,MAAM,oBACN+M,QAAmD,sBAA1CnO,KAAKkC,MAAMsI,2BACpB3F,SAAUgJ,EACV3J,SAAU,SAAAmB,GAAK,OAAI,EAAKjC,SAAS,CAACoH,2BAA4BnF,EAAMC,OAAOlE,WAE7E,cAAC,EAAD,CACE4M,IAAKhO,KAAKsL,iBAAiBzK,kBAC3BqE,MAAM,sBACNE,YAAY,sBACZR,cAAyD,sBAA1C5E,KAAKkC,MAAMsI,2BAC1B3F,SAAUgJ,EACV9J,UAAW,SAAA3C,GAAK,OAAIyH,GAAiBzH,IAAU0H,GAAkB1H,IACjE8C,SAAU,SAAC9C,EAAOqC,GAAR,OAAiB,EAAKS,SAAS,oBAAqB0E,GAAqBxH,EAAOqC,SAI9F,uBAEA,cAAC2K,EAAA,EAAD,CAAOlL,QAAQ,UAAf,oIAKA,eAACH,EAAA,EAAD,CAAKgC,UAAY,MAAjB,UACE,cAAC/B,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,UACR6B,UAAU,YACVzC,KAAK,KACLuC,UAAW+I,IAAgBjM,IAAEkC,SAAS,CAAC,EAAG,GAAI7D,KAAKkC,MAAM0I,QACzDzH,QAASnD,KAAK8L,IALhB,mBAQF,cAAC9I,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,UACR6B,UAAU,YACVzC,KAAK,KACLuC,SAAgC,IAAtB7E,KAAKkC,MAAM0I,OACrBzH,QAASnD,KAAK+L,MALhB,qBAQF,cAAC/I,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,UACR6B,UAAU,YACVzC,KAAK,KACLuC,SAAgC,IAAtB7E,KAAKkC,MAAM0I,OACrBzH,QAASnD,KAAK0B,OALhB,sBAQF,cAACsB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,UACR6B,UAAU,YACVzC,KAAK,KACLuC,UAAWlD,IAAEkC,SAAS,CAAC,EAAG,GAAI7D,KAAKkC,MAAM0I,QACzCzH,QAASnD,KAAKgM,KALhB,4BA1YZ,0BAwZE,SAAa4B,GACX,OACE,eAACE,EAAA,EAAD,WACE,cAAC/K,EAAA,EAAD,CAAKgC,UAAU,yBAAf,SACE,0CAEF,cAAChC,EAAA,EAAD,CAAKgC,UAAU,8BAAf,SACE,cAACsJ,EAAA,EAAD,CAAOnL,QAAS0K,EAAc,UAAY,SAA1C,SACGA,EAAc,YAAc,oBAGjC,cAAC7K,EAAA,EAAD,CAAKgC,UAAU,8BAAf,SACE,cAACsJ,EAAA,EAAD,CAAOnL,QAASsG,GAAexJ,KAAKkC,MAAM0I,QAA1C,SACG3B,GAAYjJ,KAAKkC,MAAM0I,YAG5B,cAAC0D,EAAA,EAAD,CACEvJ,UAAU,OACV7B,QAASsG,GAAexJ,KAAKkC,MAAM0I,QACnCnJ,IAAKzB,KAAKkC,MAAM4I,SAChByD,SAAUvO,KAAKkC,MAAM4I,SAAW,IAChC5F,MAAK,UAAKvD,IAAEmG,MAAM9H,KAAKkC,MAAM4I,UAAxB,OAEP,uBACA,cAAC,EAAD,CAAakD,IAAKhO,KAAKuL,aAAaC,gBAAiBtG,MAAM,qBAC3D,cAAC,EAAD,CAAa8I,IAAKhO,KAAKuL,aAAaE,YAAavG,MAAM,iBACvD,cAAC,EAAD,CAAa8I,IAAKhO,KAAKuL,aAAaG,WAAYxG,MAAM,gBACtD,cAACnC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKwL,MAAO,CAACC,MAAO,OAApB,SAA6BzO,KAAKkC,MAAM2I,qBApblD,yBA2bE,WACE,OACE,mCACE,cAAC,EAAD,CAAmBmD,IAAKhO,KAAKoL,wBA9brC,oBAmcE,WAAU,IAAD,OACDwC,EAAc5N,KAAKkC,MAAM7B,UAC/B,OACE,qCACE,eAACyN,EAAA,EAAD,WACG9N,KAAKiC,MAAM0I,aAAe,eAACyD,EAAA,EAAD,CAAOlL,QAAQ,UAAf,UACzB,iDACF,cAAC8B,EAAA,EAAKoB,MAAN,UACE,eAACrD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAK+B,UAAU,QAAf,SACE,cAACC,EAAA,EAAKG,QAAN,CACE/D,MAAOpB,KAAKkC,MAAM6I,WAClB7G,SAAU,SAAAmB,GAAK,OAAI,EAAKjC,SAAS,CAAC2H,WAAY1F,EAAMC,OAAOlE,SAC3DgE,YAAY,cAGhB,cAACpC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEE,QAAS,kBAAM,EAAKrD,KAAK,EAAKoC,MAAM6I,aACpClG,UAAW+I,EAFb,4BAQN,eAAC7K,EAAA,EAAD,CAAKgC,UAAU,OAAf,UACE,cAAC/B,EAAA,EAAD,CAAK+B,UAAU,QAAf,SACE,cAAC9B,EAAA,EAAD,CACE8B,UAAU,YACV7B,QAAQ,UACRC,QAASyK,EAAc5N,KAAKJ,WAAaI,KAAKN,QAC9CmF,UAAWkE,IAAsB/I,KAAKkC,MAAMwI,WAJ9C,SAKE1K,KAAKkC,MAAMwI,WACP,gBACAkD,EACE,aACA,cAGV,cAAC5K,EAAA,EAAD,CAAKwL,MAAO,CAACC,MAAO,OAApB,SACGzO,KAAKkC,MAAMuI,kBAGhB,eAAC1H,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAK+B,UAAU,aAAf,SACE,cAAChC,EAAA,EAAD,UAAM/C,KAAK0O,aAAad,OAE1B,cAAC5K,EAAA,EAAD,UACE,cAACD,EAAA,EAAD,UAAM/C,KAAK2O,aAAaf,aAK7B5N,KAAK4O,qBAxfd,GAAiCvL,IAAMC,WAA1BgH,GAKJpE,aAAe,CACpByE,aAAa,EACbtK,WAAW,GCrFf,IAAMwO,GAAYC,IAAYC,MAAMC,OAAOC,SAASC,QAC9CC,GAAgBxN,IAAE6F,IAAIqH,GAAW,OACjCjB,GAAcjM,IAAE6F,IAAIqH,GAAW,aA+BtBO,G,uKA5Bb,WACEC,SAASC,MAAQ,iB,oBAGnB,WACE,OACE,qCACE,cAACxB,EAAA,EAAD,CAAW/I,UAAU,OAArB,SACE,eAACwK,EAAA,EAAD,CAAQC,GAAG,OAAOtM,QAAQ,OAA1B,UACE,cAACqM,EAAA,EAAOE,MAAR,2BACA,eAACF,EAAA,EAAOG,SAAR,CAAiB3K,UAAU,sBAA3B,UACE,eAACwK,EAAA,EAAOI,KAAR,CAAa5K,UAAU,OAAvB,UACE,cAAC,IAAD,CAAiBrC,KAAMkN,IAAU7K,UAAU,SAC3C,mBAAGlC,KAAK,0CAAR,qCAEF,eAAC0M,EAAA,EAAOI,KAAR,mBACO,mBAAG9M,KAAK,4CAAR,kDAKb,cAACiL,EAAA,EAAD,CAAW/I,UAAU,OAArB,SACE,cAAC,GAAD,CAAa4F,YAAawE,GAAe9O,UAAWuN,c,GAvB5CvK,IAAMC,WCNTuM,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjO,MAAK,YAAkD,IAA/CkO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCKRO,GAAcC,QACW,cAA7BtB,OAAOC,SAASsB,UAEe,UAA7BvB,OAAOC,SAASsB,UAEhBvB,OAAOC,SAASsB,SAAShR,MAAM,2DAqCnC,SAASiR,GAAgBC,EAAOC,GAC9B1H,UAAU2H,cACPC,SAASH,GACT3O,MAAK,SAAC+O,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7O,QACf8G,UAAU2H,cAAcO,YAI1B9E,QAAQC,IACN,+GAKEqE,GAAUA,EAAOS,UACnBT,EAAOS,SAASN,KAMlBzE,QAAQC,IAAI,sCAGRqE,GAAUA,EAAOU,WACnBV,EAAOU,UAAUP,WAO5B9O,OAAM,SAACrB,GACN0L,QAAQ1L,MAAM,4CAA6CA,MCvFjE2Q,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFlC,SAASmC,eAAe,SAM1B3B,KDGO,SAAkBa,GACvB,GAA6C,kBAAmB1H,UAAW,CAGzE,GADkB,IAAIyI,IAAIC,aAAwB1C,OAAOC,SAASpM,MACpD8O,SAAW3C,OAAOC,SAAS0C,OAIvC,OAGF3C,OAAO4C,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,UAAMiB,aAAN,sBAEPrB,KAgEV,SAAiCI,EAAOC,GAEtCmB,MAAMpB,EAAO,CACXqB,QAAS,CAAE,iBAAkB,YAE5BhQ,MAAK,SAACxC,GAEL,IAAMyS,EAAczS,EAASwS,QAAQE,IAAI,gBAEnB,MAApB1S,EAASsL,QACO,MAAfmH,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CjJ,UAAU2H,cAAcrQ,MAAMwB,MAAK,SAAC+O,GAClCA,EAAaqB,aAAapQ,MAAK,WAC7BkN,OAAOC,SAASkD,eAKpB3B,GAAgBC,EAAOC,MAG1B3O,OAAM,WACLqK,QAAQC,IAAI,oEAtFV+F,CAAwB3B,EAAOC,GAI/B1H,UAAU2H,cAAcrQ,MAAMwB,MAAK,WACjCsK,QAAQC,IACN,+GAMJmE,GAAgBC,EAAOC,OC9B/BC,K","file":"static/js/main.f83333a1.chunk.js","sourcesContent":["export const sleep = ms => new Promise(r => setTimeout(r, ms));\n\nexport function promiseTimeout(promise, ms, message=null) {\n  const rejectPromise = new Promise((resolve, reject) => {\n    setTimeout(() => reject(message || `Timed out in ${ms} ms.`), ms);\n  });\n\n  return Promise.race([promise, rejectPromise]);\n}\n","import _ from 'lodash';\n\nimport { BrowserSerial } from 'browser-serial';\n\nimport { promiseTimeout, sleep } from './utils';\n\n// Options for the serial connection.\nconst serialOptions = {\n  baudRate: 2000000,\n  dataBits: 8,\n  stopBits: 1,\n  parity: 'none',\n  bufferSize: 255,\n  flowControl: 'none',\n};\n// Applying this filter will show only Arduinos in the serial device\n// selection.\nconst serialFilters = { usbVendorId: 0x2341 };\n// Throw an error if there is no serial response after waiting this much milliseconds.\nconst serialTimeout = 5000;\nconst connectResponse = '<Arduino is ready>';\nconst setupCommands = [\n  '<SET_ACCEL,111,1000.0,1000.0,1000.0>',\n  '<SET_SPEED,111,1000.0,1000.0,1000.0>'\n];\nconst stopCommand = '<STOP,111,0.0,0.0,0.0>';\nconst makeCommand = angle => `<RUN,111,${angle},${angle},${angle}>`;\n// Hardcoded angles for now.\n// Note that each position i is the amount of movement needed to go from\n// tube i to i+1.\nconst angles = [84, 78, 75, 70, 64, 61, 58, 56, 54, 52, 50, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 39, 38, 37, 36, 36, 35, 34, 34, 34, 33, 33, 32, 32, 31, 31, 31, 30, 30, 30, 29, 29, 29, 28, 28, 28, 27, 27, 27, 26, 26, 26, 26, 26, 25, 25, 25, 25, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 23, 23, 22, 22, 22, 22, 22, 22, 22, 22, 21, 21,\n  21, 21, 21, 21, 21, 20, 20\n];\n\nconst commandRegex = /[^<>,]+/g;\n\n// Utility function to validate responses.\n// Simply checks whether the setting string is the same.\nfunction responseIsValid(command, response) {\n  const commandMatch = command.match(commandRegex)[0];\n  const responseMatch = response.match(commandRegex)[0];\n  return commandMatch === responseMatch;\n}\n\n\nexport class Colosseum {\n  constructor(dry=false) {\n    this.dry = dry;\n    this.serial = new BrowserSerial(serialOptions, serialFilters);\n    // Async generator for responses. Get *promises* to lines by using next().\n    this.reader = this.serial.readLineGenerator();\n    this.connected = dry;\n    this.ready = false;\n    this.paused = false;\n    this.stopped = false;\n    this.done = false;\n    this.error = false;\n    this.startTime = null;\n\n    this.position = 0;\n    this.numberOfFractions = null;\n    this.interval = null;\n    this.callback = null;\n    this.doneCallback = null;\n    this.errorCallback = null;\n  }\n\n  async _connect() {\n    if (this.dry) return connectResponse;\n    await this.serial.connect();\n    const response = await this.reader.next();\n    const value = response.value.value;\n    if (value !== connectResponse) throw Error(\n      `Unexpected response ${value}. Expected ${connectResponse}.\n      Is the Arduino flashed with the correct firmware?`\n    );\n    this.connected = true;\n    return value;\n  }\n  connect = () => promiseTimeout(this._connect(), serialTimeout, 'Connection timed out.');\n\n  async _disconnect() {\n    if (this.dry) return;\n    if (!this.connected) throw Error('No device connected.');\n    await this.serial.disconnect();\n    this.connected = false;\n  }\n  disconnect = () => promiseTimeout(this._disconnect(), serialTimeout, 'Disconnection timed out.');\n\n  // Send command without verifying response\n  async _send(command) {\n    if (this.dry) return command;\n    if (!this.connected) throw Error('No device connected.');\n    await this.serial.write(command);\n    const response = await this.reader.next();\n    return response.value.value;\n  }\n  send = (command) => promiseTimeout(this._send(command), serialTimeout, `Command ${command} timed out.`);\n\n  // Send command and verify response\n  async sendAndVerify(command) {\n    const value = await this.send(command);\n    if (!responseIsValid(command, value)) throw Error(`Unexpected response ${value}. Expected ${command}.`)\n    return value;\n  }\n\n  // All times must be in milliseconds\n  // Callback is a function that is called at the end of each fraction, before\n  // the tube bed is rotated. It should take a single integer argument, indicating\n  // the index of the tube that was just collected.\n  // Run should only be called once per object.\n  async setup(\n    numberOfFractions,\n    interval,\n    callback=() => null,\n    errorCallback=() => null,\n    doneCallback=() => null\n  ) {\n    if (!this.connected) throw Error('No device connected.');\n    this.interval = interval;\n    this.numberOfFractions = numberOfFractions;\n    this.callback = callback;\n    this.doneCallback = doneCallback;\n    this.errorCallback = errorCallback;\n\n    // Send setup commands\n    for (const command of setupCommands) await this.sendAndVerify(command);\n\n    this.ready = true;\n  }\n\n  async run() {\n    if (!this.connected) throw Error('No device connected.');\n    if (!this.ready) throw Error('Colosseum is not ready. setup() must be called.');\n    if (this.position !== 0) throw Error(`position must be zero, not ${this.position}`);\n    this.startTime = Date.now();\n    await this.resume();\n  }\n\n  pause() {\n    this.paused = true;\n  }\n\n  async resume() {\n    if (!this.connected) throw Error('No device connected.');\n    if (this.error) throw Error('There was an error while running.');\n    if (_.isNil(this.startTime)) throw Error('Call run() instead of resume() at the start.');\n    if (this.stopped) throw Error('Device was stopped.');\n\n    this.paused = false;\n    while (!this.paused && this.position < this.numberOfFractions && !this.error) {\n      this.sendAndVerify(makeCommand(angles[this.position]))\n        .then(() => this.callback(this.position))\n        .catch(error => {\n          this.error = true;\n          this.errorCallback(this.position, error);\n        });\n      this.position++;\n\n      await sleep(this.interval);\n    }\n\n    // Call doneCallback if we are done.\n    if (this.position >= this.numberOfFractions) {\n      this.done = true;\n      this.doneCallback();\n    }\n  }\n\n  async stop() {\n    this.paused = true;\n    this.stopped = true;\n    await this.send(stopCommand);\n  }\n}\n","import React from 'react';\nimport { Col, Row, Modal, Button } from 'react-bootstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nexport class NotSupportedModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false\n    }\n  }\n\n  render() {\n    return (\n      <Modal show={this.state.show} centered size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>\n            <FontAwesomeIcon icon={faExclamationTriangle} />\n            Web Serial API Not Found\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>\n            This web browser does not support the Web Serial API, which is required\n            to use this application. Please use a different browser, or update the\n            current one to a version that supports the Web Serial API.\n          </p>\n          <p>\n            A list of supported browsers and their versions can be\n            found <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Serial#browser_compatibility\">here</a>.\n          </p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Row>\n            <Col>\n              <Button variant=\"secondary\" onClick={() => this.setState({show: false})}>\n                Close\n              </Button>\n            </Col>\n          </Row>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Col, Dropdown, Form } from 'react-bootstrap';\n\nconst allowedChars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'];\n/*\n * A modular React component that renders a form group for number and unit input.\n * It provides onChange listeners for the value and unit (or either).\n */\nexport class UnitNumberInput extends React.Component {\n  static propTypes = {\n    label: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    units: PropTypes.arrayOf(PropTypes.string),\n    disabled: PropTypes.bool,\n    inputDisabled: PropTypes.bool,\n    dropdownDisabled: PropTypes.bool,\n    onChange: PropTypes.func,\n    onValueChange: PropTypes.func,\n    onUnitChange: PropTypes.func,\n    validator: PropTypes.func,\n  }\n  static defaultProps = {\n    inputDisabled: false,\n    dropdownDisabled: false,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      unit: null,\n      invalid: null,\n    }\n\n    // These are immediately updated, unlike this.state, which is updated\n    // asynchronously.\n    this.value = '';\n    this.unit = null;\n    this.invalid = null;\n  }\n\n  setUnitNumber(unitNumber) {\n    if ((_.isNil(this.props.units) !== _.isNil(unitNumber.unit)) && !_.includes(this.props.units, unitNumber.unit))\n      throw Error(`unit ${unitNumber.unit} not in ${this.props.units}`);\n    const invalid = _.isFunction(this.props.validator) && !_.isNaN(unitNumber.value)\n      ? this.props.validator(unitNumber.value)\n      : null;\n    this.value = unitNumber.value;\n    this.unit = unitNumber.unit;\n    this.invalid = invalid;\n    this.setState({\n      value: _.isNaN(unitNumber.value) ? '' : unitNumber.value.toString(),\n      unit: unitNumber.unit,\n      invalid: invalid,\n    });\n  }\n\n  // Called right after component is initialized.\n  // Note that this.setState() may be called here (but not in the constructor).\n  // We set the unit to be the first unit in this.units for simplicity.\n  componentDidMount() {\n    if (!_.isNil(this.props.units)) {\n      this.unit = this.props.units[0];\n      this.setState({unit: this.props.units[0]});\n    }\n  }\n\n  onChange(value, unit) {\n    _.isFunction(this.props.onChange) && this.props.onChange(value, unit);\n  }\n\n  onValueChange(value) {\n    const validChars = _.every(value, char => _.includes(allowedChars, char));\n    const numPeriods = _.sumBy(value, char => char === '.');\n    if (!validChars || numPeriods > 1) return;\n    const floatValue = parseFloat(value);\n    const invalid = _.isFunction(this.props.validator) && !_.isNaN(floatValue)\n      ? this.props.validator(floatValue)\n      : null;\n    _.isFunction(this.props.onValueChange) && this.props.onValueChange(floatValue);\n    this.value = value;\n    this.invalid = invalid;\n    this.setState({value: value, invalid: invalid});\n    this.onChange(floatValue, this.state.unit);\n  }\n\n  onUnitChange(unit) {\n    const floatValue = parseFloat(this.state.value);\n    this.unit = unit;\n    this.setState({unit: unit});\n    _.isFunction(this.props.onUnitChange) && this.props.onUnitChange(floatValue);\n    this.onChange(floatValue, unit);\n  }\n\n  render() {\n    const inputDisabled = this.props.inputDisabled || this.props.disabled;\n    const dropdownDisabled = this.props.dropdownDisabled || this.props.disabled;\n    return (\n      <>\n        <Col className=\"col-3\">\n          <Form.Label\n            className={inputDisabled && 'text-muted'}\n          >\n            {this.props.label}\n          </Form.Label>\n        </Col>\n        <Col>\n          <Form.Control\n            placeholder={this.props.placeholder}\n            value={this.state.value}\n            onChange={event => this.onValueChange(event.target.value)}\n            readOnly={inputDisabled}\n            isInvalid={!_.isNil(this.state.invalid)}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {this.state.invalid}\n          </Form.Control.Feedback>\n        </Col>\n        {!_.isNil(this.props.units) &&\n          <Col className=\"col-3\">\n            <Dropdown>\n              <Dropdown.Toggle\n                variant=\"outline-primary\"\n                className=\"w-100\"\n                disabled={dropdownDisabled}\n              >\n                {this.state.unit || 'Unit'}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                {_.map(this.props.units, unit => (\n                  <Dropdown.Item\n                    key={unit}\n                    eventKey={unit}\n                    onSelect={(eventKey, event) => this.onUnitChange(eventKey)}\n                  >{unit}</Dropdown.Item>\n                ))}\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n        }\n      </>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Form } from 'react-bootstrap';\n\nexport class StatusInput extends React.Component {\n  static propTypes = {\n    label: PropTypes.string.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    }\n  }\n\n  render() {\n    return (\n      <Form.Group>\n        <Form.Label>{this.props.label}</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"\"\n          value={this.state.value}\n          readOnly\n        />\n      </Form.Group>\n    )\n  }\n}\n","/*\n * This file contains functions to calculate values based on user-inputted values.\n * Function names are based on which values are provided.\n * First argument is always flow rate.\n */\nimport { Time, Volume, UnitNumber } from './';\n\n// Define units that each number MUST be in before calculation.\nconst _flowRateUnit = 'uL/sec';\nconst _totalTimeUnit = 'sec';\nconst _volumePerFractionUnit = 'uL';\nconst _totalVolumeUnit = 'uL';\nconst _numberOfFractionsUnit = null;\n\n// Helper functions\nconst calculateTotalVolume = (flowRate, totalTime) =>\n  new Volume(totalTime.value * flowRate.value, _totalVolumeUnit);\nconst calculateNumberOfFractions = (totalVolume, volumePerFraction) =>\n  new UnitNumber(totalVolume.value / volumePerFraction.value, _numberOfFractionsUnit);\nconst calculateVolumePerFraction = (totalVolume, numberOfFractions) =>\n  new Volume(totalVolume.value / numberOfFractions.value, _volumePerFractionUnit);\nconst calculateTotalTime = (flowRate, totalVolume) =>\n  new Time(totalVolume.value / flowRate.value, _totalTimeUnit);\n\nexport function totalTimeVolumePerFraction(\n  flowRate, totalTime, volumePerFraction,\n  totalVolumeUnit=_totalVolumeUnit, numberOfFractionsUnit=_numberOfFractionsUnit\n) {\n  const _flowRate = flowRate.convert(_flowRateUnit);\n  const _totalTime = totalTime.convert(_totalTimeUnit);\n  const _volumePerFraction = volumePerFraction.convert(_volumePerFractionUnit);\n\n  const _totalVolume = calculateTotalVolume(_flowRate, _totalTime);\n  const totalVolume = _totalVolume.convert(totalVolumeUnit);\n  const numberOfFractions = calculateNumberOfFractions(\n    _totalVolume, _volumePerFraction\n  ).convert(numberOfFractionsUnit);\n  return {totalVolume, numberOfFractions};\n}\n\nexport function totalTimeNumberOfFractions(\n  flowRate, totalTime, numberOfFractions,\n  totalVolumeUnit=_totalVolumeUnit, volumePerFractionUnit=_volumePerFractionUnit\n) {\n  const _flowRate = flowRate.convert(_flowRateUnit);\n  const _totalTime = totalTime.convert(_totalTimeUnit);\n  const _numberOfFractions = numberOfFractions.convert(_numberOfFractionsUnit);\n\n  const _totalVolume = calculateTotalVolume(_flowRate, _totalTime);\n  const totalVolume = _totalVolume.convert(totalVolumeUnit);\n  const volumePerFraction = calculateVolumePerFraction(\n    _totalVolume, _numberOfFractions\n  ).convert(volumePerFractionUnit);\n  return {totalVolume, volumePerFraction};\n}\n\nexport function totalVolumeVolumePerFraction(\n  flowRate, totalVolume, volumePerFraction,\n  totalTimeUnit=_totalTimeUnit, numberOfFractionsUnit=_numberOfFractionsUnit\n) {\n  const _flowRate = flowRate.convert(_flowRateUnit);\n  const _totalVolume = totalVolume.convert(_totalVolumeUnit);\n  const _volumePerFraction = volumePerFraction.convert(_volumePerFractionUnit);\n\n  const totalTime = calculateTotalTime(_flowRate, _totalVolume).convert(totalTimeUnit);\n  const numberOfFractions = calculateNumberOfFractions(\n    _totalVolume, _volumePerFraction\n  ).convert(numberOfFractionsUnit);\n  return {totalTime, numberOfFractions};\n}\n\nexport function totalVolumeNumberOfFractions(\n  flowRate, totalVolume, numberOfFractions,\n  totalTimeUnit=_totalTimeUnit, volumePerFractionUnit=_volumePerFractionUnit\n) {\n  const _flowRate = flowRate.convert(_flowRateUnit);\n  const _totalVolume = totalVolume.convert(_totalVolumeUnit);\n  const _numberOfFractions = numberOfFractions.convert(_numberOfFractionsUnit);\n\n  const totalTime = calculateTotalTime(_flowRate, _totalVolume).convert(totalTimeUnit);\n  const volumePerFraction = calculateVolumePerFraction(\n    _totalVolume, _numberOfFractions\n  ).convert(volumePerFractionUnit);\n  return {totalTime, volumePerFraction};\n}\n","import _ from 'lodash';\n\n/*\n * Class that is used to convert one number of a certain unit to another\n * number of another unit. Extend this class to implement custom\n * units and conversions.\n */\nexport class UnitNumber {\n  // A value without a unit can be constructed by calling UnitNumber(n).\n  // Omitting the second argument like this is fine.\n  constructor(value, unit, units=[], conversionFactors={}) {\n    // Check that all required conversion factors are defined.\n    for (const unit1 of units) {\n      for (const unit2 of units) {\n        if (unit1 !== unit2 && !_.has(conversionFactors, [unit1, unit2])) {\n          throw Error(`Missing required conversion factor ${unit1}->${unit2}`);\n        }\n      }\n    }\n\n    // Value must be a number\n    if (!_.isNumber(value)) throw Error(`Value must be a number, but got ${value}`);\n\n    // If this.units has units, then the provided unit must be one of those.\n    if (!_.isEmpty(units) && !_.includes(units, unit)) {\n      throw Error(`Unit must be one of ${_.toString(units)}, but got ${unit}`);\n    }\n\n    // If this.units is empty, then the provided unit must be null or undefined.\n    if (_.isEmpty(units) && !_.isNil(unit)) {\n      throw Error(`Unit must not be provided, but got ${unit}`);\n    }\n\n    this.units = units;\n    this.conversionFactors = conversionFactors;\n    this.value = value;\n    this.unit = unit;\n  }\n\n  // Convert this number to the desired unit.\n  convert(unit) {\n    if ((_.isNil(this.unit) && _.isNil(this.unit)) || unit === this.unit) {\n      return new this.constructor(this.value, this.unit);\n    }\n\n    if (!_.includes(this.units, unit)) {\n      throw Error(`Unit must be one of ${_.toString(this.units)}, but got ${unit}`);\n    }\n\n    return new this.constructor(\n      this.conversionFactors[this.unit][unit] * this.value, unit\n    );\n  }\n  toString(places=null) {\n    const value = _.isInteger(places) && places > 0 ? _.floor(this.value, places) : this.value;\n    return _.isNil(this.unit) ? `${value}` : `${value} ${this.unit}`;\n  }\n}\n","import { UnitNumber } from './UnitNumber';\n\nconst units = ['uL/sec', 'uL/min', 'uL/hr', 'mL/sec', 'mL/min', 'mL/hr'];\nconst conversionFactors = {\n  'uL/sec': {\n    'uL/min': 60,\n    'uL/hr' : 3600,\n    'mL/sec': 1 / 1000,\n    'mL/min': 60 / 1000,\n    'mL/hr' : 3600 / 1000\n  },\n  'uL/min': {\n    'uL/sec': 1 / 60,\n    'uL/hr' : 60,\n    'mL/sec': 1 / (1000 * 60),\n    'mL/min': 1 / 1000,\n    'mL/hr' : 60 / 1000\n  },\n  'uL/hr': {\n    'uL/sec': 1 / 3600,\n    'uL/min': 1 / 60,\n    'mL/sec': 1 / (1000 * 3600),\n    'mL/min': 1 / (1000 * 60),\n    'mL/hr' : 1 / 1000\n  },\n  'mL/sec': {\n    'uL/sec': 1000,\n    'uL/min': 1000 * 60,\n    'uL/hr' : 1000 * 3600,\n    'mL/min': 60,\n    'mL/hr' : 3600\n  },\n  'mL/min': {\n    'uL/sec': 1000 / 60,\n    'uL/min': 1000,\n    'uL/hr' : 1000 * 60,\n    'mL/sec': 1 / 60,\n    'mL/hr' : 60\n  },\n  'mL/hr': {\n    'uL/sec': 1000 / 3600,\n    'uL/min': 1000 / 60,\n    'uL/hr' : 1000,\n    'mL/sec': 1 / 3600,\n    'mL/min': 1 / 60,\n  }\n};\n\nexport class FlowRate extends UnitNumber {\n  constructor(value, unit) {\n    super(value, unit, units, conversionFactors);\n  }\n}\n","import { UnitNumber } from './UnitNumber';\n\nconst units = ['ms', 'sec', 'min', 'hr'];\nconst conversionFactors = {\n  'ms' : {\n    'sec': 1 / 1000,\n    'min': 1 / (1000 * 60),\n    'hr' : 1 / (1000 * 3600)\n  },\n  'sec' : {\n    'ms'  : 1000,\n    'min' : 1 / 60,\n    'hr'  : 1 / 3600\n  },\n  'min' : {\n    'ms'  : 60 * 1000,\n    'sec' : 60,\n    'hr'  : 1 / 60\n  },\n  'hr' : {\n    'ms'  : 3600 * 1000,\n    'sec' : 3600,\n    'min' : 60\n  }\n};\n\nexport class Time extends UnitNumber {\n  constructor(value, unit) {\n    super(value, unit, units, conversionFactors);\n  }\n}\n","import { UnitNumber } from './UnitNumber';\n\nconst units = ['0.5 mL', '1.0 mL', '1.5 mL'];\nconst conversionFactors = {\n  '0.5 mL': {\n    '1.0 mL': null,\n    '1.5 mL' : null,\n  },\n  '1.0 mL': {\n    '0.5 mL': null,\n    '1.5 mL' : null,\n  },\n  '1.5 mL': {\n    '0.5 mL': null,\n    '1.0 mL': null,\n  }\n};\n\nexport class Tube extends UnitNumber {\n  constructor(value, unit) {\n    super(value, unit, units, conversionFactors);\n  }\n}\n","import { UnitNumber } from './UnitNumber';\n\nconst units = ['uL', 'mL', 'L'];\nconst conversionFactors = {\n  'uL' : {\n    'mL' : 1 / 1000,\n    'L'  : 1 / 1000000\n  },\n  'mL' : {\n    'uL' : 1000,\n    'L'  : 1 / 1000\n  },\n  'L' : {\n    'uL' : 1000000,\n    'mL' : 1000\n  }\n};\n\nexport class Volume extends UnitNumber {\n  constructor(value, unit) {\n    super(value, unit, units, conversionFactors);\n  }\n}\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Col,\n  Container,\n  Form,\n  ProgressBar,\n  Row,\n} from 'react-bootstrap';\n\nimport { Colosseum } from './Colosseum';\nimport { NotSupportedModal, StatusInput, UnitNumberInput } from './components';\nimport {\n  FlowRate,\n  Time,\n  totalTimeNumberOfFractions,\n  totalTimeVolumePerFraction,\n  totalVolumeNumberOfFractions,\n  totalVolumeVolumePerFraction,\n  Tube,\n  UnitNumber,\n  Volume,\n} from './converters';\n\n/*\n * These arrays define what units to *display* (not what unit conversions are\n * supported; this should be defined in each of the converters).\n * Make sure that the units listed here are defined (and conversions are defined).\n * Otherwise things will break.\n */\nconst tubeUnits = ['0.5 mL', '1.0 mL', '1.5 mL'];\nconst flowRateUnits = ['uL/sec', 'uL/min', 'uL/hr', 'mL/sec', 'mL/min', 'mL/hr'];\nconst totalTimeUnits = ['sec', 'min', 'hr'];\nconst volumePerFractionUnits = ['uL', 'mL'];\nconst totalVolumeUnits = ['uL', 'mL', 'L'];\n\nconst constructUnitNumberFactory = (converter, value, unit) =>\n  _.isNaN(value) ? null : new converter(value, unit);\nconst constructTube = (value, unit) => constructUnitNumberFactory(Tube, value, unit);\nconst constructFlowRate = (value, unit) => constructUnitNumberFactory(FlowRate, value, unit);\nconst constructTime = (value, unit) => constructUnitNumberFactory(Time, value, unit);\nconst constructVolume = (value, unit) => constructUnitNumberFactory(Volume, value, unit);\nconst constructUnitNumber = (value, unit) => constructUnitNumberFactory(UnitNumber, value, unit);\n\nconst integerValidator = value => _.isInteger(value) ? null : 'Number must be an integer.';\nconst positiveValidator = value => value > 0 ? null : 'Number must be positive.';\n\n// Some configurations. Should these be in a separate file?\nconst webSerialSupported = 'serial' in navigator;\nconst statusTexts = {\n  0: 'Not running',\n  1: 'Running',\n  2: 'Paused',\n  3: 'Stopped',\n  4: 'Done',\n  5: 'Error',\n};\nconst statusVariants = {\n  0: 'danger',\n  1: 'info',\n  2: 'warning',\n  3: 'danger',\n  4: 'success',\n  5: 'danger',\n};\nconst selectionFunctions = {\n  totalTime: {\n    volumePerFraction: totalTimeVolumePerFraction,\n    numberOfFractions: totalTimeNumberOfFractions,\n  },\n  totalVolume: {\n    volumePerFraction: totalVolumeVolumePerFraction,\n    numberOfFractions: totalVolumeNumberOfFractions,\n  },\n};\n// \"Other\" (i.e. disabled input) is hardcoded for now.\nconst otherSelections = {\n  totalTime: 'totalVolume',\n  totalVolume: 'totalTime',\n  volumePerFraction: 'numberOfFractions',\n  numberOfFractions: 'volumePerFraction',\n};\nconst tubeSizes = {\n  '0.5 mL': 0.5,\n  '1.0 mL': 1.0,\n  '1.5 mL': 1.5,\n};\n\nexport class ColosseumUI extends React.Component {\n  static propTypes = {\n    development: PropTypes.bool,\n    connected: PropTypes.bool,\n  }\n  static defaultProps = {\n    development: false,\n    connected: false,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Input selection\n      timeVolumeRadioSelection: '',\n      volumeNumberRadioSelection: '',\n\n      // Connection state\n      connectError: '',\n      connecting: false,\n      connected: this.props.development && this.props.connected,\n\n      // State depending on Colosseum status\n      status: 0,\n      statusError: '',\n      progress: 0,\n\n      // Dev states\n      devCommand: '',\n    };\n\n    // Object that manages serial connection\n    this.colosseum = new Colosseum(this.props.development && this.props.connected);\n    this.monitorInterval = null;\n\n    // Values will be UnitNumber instances representing each input\n    this.unitNumbers = {\n      numberOfTubes: null,\n      flowRate: null,\n      totalTime: null,\n      totalVolume: null,\n      volumePerFraction: null,\n      numberOfFractions: null,\n    };\n\n    // Component references\n    this.notSupportedModal = React.createRef();\n    this.unitNumberInputs = {\n      numberOfTubes: React.createRef(),\n      flowRate: React.createRef(),\n      totalTime: React.createRef(),\n      totalVolume: React.createRef(),\n      volumePerFraction: React.createRef(),\n      numberOfFractions: React.createRef(),\n    };\n    this.statusInputs = {\n      volumeDispensed: React.createRef(),\n      timeElapsed: React.createRef(),\n      tubeNumber: React.createRef(),\n    };\n\n    // Bind functions\n    // Binding is required to be able to use `this` in these functions\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.update = this.update.bind(this);\n    this.validate = this.validate.bind(this);\n    this.run = this.run.bind(this);\n    this.pause = this.pause.bind(this);\n    this.resume = this.resume.bind(this);\n    this.stop = this.stop.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.monitor = this.monitor.bind(this);\n  }\n\n  connect() {\n    this.setState({connecting: true});\n    this.colosseum.connect()\n      .then(result => this.setState({connectError: '', connected: true}))\n      .catch(error => this.setState({connectError: error.toString()}))\n      .finally(() => this.setState({connecting: false}));\n  }\n\n  disconnect() {\n    this.colosseum.disconnect()\n      .then(result => this.setState({connectError: '', connected: false}))\n      .catch(error => this.setState({connectError: error.toString()}))\n  }\n\n  send(command) {\n    console.log(`send ${command}`);\n    this.colosseum.send(command)\n      .then(response => console.log(`receive ${command}`));\n  }\n\n  // Monitors the internal Colosseum variable and updates the volume dispensed and\n  // time elapsed.\n  monitor() {\n    // Don't schedule any more if done or error.\n    if (this.colosseum.done || this.colosseum.error || this.colosseum.stopped) {\n      clearInterval(this.monitorInterval);\n      return;\n    }\n\n    const timeElapsed = new Time(Date.now() - this.colosseum.startTime, 'ms').convert('sec');\n    const timeUnit = this.unitNumbers.totalTime.unit;\n    const volumeDispensed = new Volume(\n      this.unitNumbers.flowRate.convert('uL/sec').value * timeElapsed.value, 'uL'\n    );\n    const volumeUnit = this.unitNumbers.totalVolume.unit;\n\n    this.statusInputs.volumeDispensed.current.setState({\n      value: volumeDispensed.convert(volumeUnit).toString(3)\n    });\n    this.statusInputs.timeElapsed.current.setState({\n      value: timeElapsed.convert(timeUnit).toString(3)\n    });\n  }\n\n  update() {\n    const selection1 = this.state.timeVolumeRadioSelection;\n    const selection2 = this.state.volumeNumberRadioSelection;\n    const otherSelection1 = otherSelections[selection1];\n    const otherSelection2 = otherSelections[selection2];\n\n    const flowRate = this.unitNumbers.flowRate;\n    const unitNumber1 = this.unitNumbers[selection1];\n    const unitNumber2 = this.unitNumbers[selection2];\n    const targetUnit1 = this.unitNumberInputs[otherSelection1].current.unit;\n    const targetUnit2 = this.unitNumberInputs[otherSelection2].current.unit;\n\n    // Check that required values exist.\n    if (_.isNil(flowRate) || _.isNil(unitNumber1) || _.isNil(unitNumber2)) return;\n\n    const calculated = selectionFunctions[selection1][selection2](\n      flowRate, unitNumber1, unitNumber2, targetUnit1, targetUnit2\n    );\n    _.forEach(calculated, (value, key) => {\n      this.unitNumbers[key] = _.isNaN(value.value) ? null : value;\n      this.unitNumberInputs[key].current.setUnitNumber(value);\n    });\n  }\n\n  validate() {\n    const results = _.map(this.unitNumbers, (value, key) => {\n      const unitNumberInput = this.unitNumberInputs[key].current;\n      if (!_.isNil(unitNumberInput.invalid)) return false;\n      if (_.isNil(value)) {\n        unitNumberInput.setState({invalid: 'Input is invalid.'});\n        return false;\n      } else {\n        return true;\n      }\n    });\n    if (!_.every(results)) return false;\n\n    const numberOfTubes = this.unitNumbers.numberOfTubes.value;\n    const tubeSize = this.unitNumbers.numberOfTubes.unit;  // string\n    const numberOfFractions = this.unitNumbers.numberOfFractions.value;\n    const volumePerFraction = this.unitNumbers.volumePerFraction.convert('mL').value;\n\n    // Check that number of tubes doesn't exceed maximum\n\n    // Check that number of tubes doesn't exceed number of fractions\n    if (numberOfFractions > numberOfTubes) {\n      this.unitNumberInputs.numberOfTubes.current.setState({\n        invalid: `Number of fractions (${numberOfFractions}) exceeds number of tubes.`\n      });\n      return false;\n    }\n\n    // Check that volume per fraction doesn't exceed tube size\n    if (volumePerFraction > tubeSizes[tubeSize]) {\n      this.unitNumberInputs.numberOfTubes.current.setState({\n        invalid: `Volume per fraction (${volumePerFraction} mL) exceeds tube size.`\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n  run() {\n    if (this.validate()) {\n      this.colosseum.setup(\n        this.unitNumbers.numberOfFractions.value,\n        1000,\n        position => {\n          this.statusInputs.tubeNumber.current.setState({value: position});\n          this.setState({progress: (position / this.unitNumbers.numberOfFractions.value) * 100});\n        },\n        (position, error) => this.setState({\n          statusError: `Error at position ${position}: ${error.toString()}`,\n          status: 5,\n        }),\n        () => this.setState({status: 4})\n      )\n        .then(() => {\n          this.colosseum.run();\n          this.setState({status: 1});\n          this.monitorInterval = setInterval(this.monitor, 100);\n        })\n        .catch(error => this.setState({statusError: `Error during setup: ${error.toString()}`}));\n    }\n  }\n\n  pause() {\n    this.colosseum.pause();\n    this.setState({status: 2});\n  }\n\n  resume() {\n    this.colosseum.resume();\n    this.setState({status: 1});\n  }\n\n  // Stopping is the same as pausing, but without the option to restart.\n  stop() {\n    this.colosseum.stop();\n    this.setState({status: 3});\n\n  }\n\n  onChange(key, factory, value, unit, update=true) {\n    this.unitNumbers[key] = factory(value, unit);\n    update && this.update();\n  }\n\n  componentDidMount() {\n    // Show alert modal if web serial is not supported.\n    if (!webSerialSupported) {\n      this.notSupportedModal.current.setState({show: true});\n      this.setState({connectError: 'Web Serial API not found in current browser'});\n    }\n\n    // Select the first inputs by default\n    this.setState({\n      timeVolumeRadioSelection: 'totalTime',\n      volumeNumberRadioSelection: 'volumePerFraction',\n    });\n  }\n\n  // Call this function in render() to display input container.\n  renderInputs(isConnected) {\n    const disableInputs = this.state.status > 0;\n    return (\n      <Container>\n        <Form.Group as={Row}>\n          <UnitNumberInput\n            ref={this.unitNumberInputs.numberOfTubes}\n            label=\"Number of Tubes (excluding tube 0)\"\n            placeholder=\"# tubes\"\n            units={tubeUnits}\n            disabled={disableInputs}\n            validator={value => integerValidator(value) || positiveValidator(value)}\n            onChange={(value, unit) => this.onChange('numberOfTubes', constructTube, value, unit, false)}\n          />\n        </Form.Group>\n\n        <Form.Group as={Row}>\n          <UnitNumberInput\n            ref={this.unitNumberInputs.flowRate}\n            label=\"Flow rate\"\n            placeholder=\"Flow rate\"\n            units={flowRateUnits}\n            disabled={disableInputs}\n            validator={positiveValidator}\n            onChange={(value, unit) => this.onChange('flowRate', constructFlowRate, value, unit)}\n          />\n        </Form.Group>\n\n        <hr />\n\n        <Form.Group as={Row}>\n          <Form.Check\n            type=\"radio\"\n            name=\"timeVolumeRadio\"\n            value=\"totalTime\"\n            checked={this.state.timeVolumeRadioSelection === 'totalTime'}\n            disabled={this.state.status > 0}\n            onChange={event => this.setState({timeVolumeRadioSelection: event.target.value})}\n          />\n          <UnitNumberInput\n            ref={this.unitNumberInputs.totalTime}\n            label=\"Total time\"\n            placeholder=\"Total time\"\n            units={totalTimeUnits}\n            inputDisabled={this.state.timeVolumeRadioSelection !== 'totalTime'}\n            disabled={disableInputs}\n            validator={positiveValidator}\n            onChange={(value, unit) => this.onChange('totalTime', constructTime, value, unit)}\n          />\n        </Form.Group>\n\n        <Form.Group as={Row}>\n          <Form.Check\n            type=\"radio\"\n            name=\"timeVolumeRadio\"\n            value=\"totalVolume\"\n            checked={this.state.timeVolumeRadioSelection === 'totalVolume'}\n            disabled={disableInputs}\n            onChange={event => this.setState({timeVolumeRadioSelection: event.target.value})}\n          />\n          <UnitNumberInput\n            ref={this.unitNumberInputs.totalVolume}\n            label=\"Total volume\"\n            placeholder=\"Total volume\"\n            units={totalVolumeUnits}\n            inputDisabled={this.state.timeVolumeRadioSelection !== 'totalVolume'}\n            disabled={disableInputs}\n            validator={positiveValidator}\n            onChange={(value, unit) => this.onChange('totalVolume', constructVolume, value, unit)}\n          />\n        </Form.Group>\n\n        <hr />\n\n        <Form.Group as={Row}>\n          <Form.Check\n            type=\"radio\"\n            name=\"volumeNumberRadio\"\n            value=\"volumePerFraction\"\n            checked={this.state.volumeNumberRadioSelection === 'volumePerFraction'}\n            disabled={disableInputs}\n            onChange={event => this.setState({volumeNumberRadioSelection: event.target.value})}\n          />\n          <UnitNumberInput\n            ref={this.unitNumberInputs.volumePerFraction}\n            label=\"Volume per fraction\"\n            placeholder=\"Volume per fraction\"\n            units={volumePerFractionUnits}\n            inputDisabled={this.state.volumeNumberRadioSelection !== 'volumePerFraction'}\n            disabled={disableInputs}\n            validator={positiveValidator}\n            onChange={(value, unit) => this.onChange('volumePerFraction', constructVolume, value, unit)}\n          />\n        </Form.Group>\n\n        <Form.Group as={Row}>\n          <Form.Check\n            type=\"radio\"\n            name=\"volumeNumberRadio\"\n            value=\"numberOfFractions\"\n            checked={this.state.volumeNumberRadioSelection === 'numberOfFractions'}\n            disabled={disableInputs}\n            onChange={event => this.setState({volumeNumberRadioSelection: event.target.value})}\n          />\n          <UnitNumberInput\n            ref={this.unitNumberInputs.numberOfFractions}\n            label=\"Number of fractions\"\n            placeholder=\"Number of fractions\"\n            inputDisabled={this.state.volumeNumberRadioSelection !== 'numberOfFractions'}\n            disabled={disableInputs}\n            validator={value => integerValidator(value) || positiveValidator(value)}\n            onChange={(value, unit) => this.onChange('numberOfFractions', constructUnitNumber, value, unit)}\n          />\n        </Form.Group>\n\n        <hr />\n\n        <Alert variant=\"warning\">\n          Please ensure the dispenser arm is centered on the first tube by\n          rotating the tube bed. Tube numbering starts at zero.\n        </Alert>\n\n        <Row className = \"p-2\">\n          <Col>\n            <Button\n              variant=\"primary\"\n              className=\"btn-block\"\n              size=\"sm\"\n              disabled={!isConnected || !_.includes([0, 2], this.state.status)}\n              onClick={this.run}\n            >Run</Button>\n          </Col>\n          <Col>\n            <Button\n              variant=\"primary\"\n              className=\"btn-block\"\n              size=\"sm\"\n              disabled={this.state.status !== 1}\n              onClick={this.pause}\n            >Pause</Button>\n          </Col>\n          <Col>\n            <Button\n              variant=\"primary\"\n              className=\"btn-block\"\n              size=\"sm\"\n              disabled={this.state.status !== 2}\n              onClick={this.resume}\n            >Resume</Button>\n          </Col>\n          <Col>\n            <Button\n              variant=\"primary\"\n              className=\"btn-block\"\n              size=\"sm\"\n              disabled={!_.includes([1, 2], this.state.status)}\n              onClick={this.stop}\n            >Stop</Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  // Call this function in render() to display status container.\n  renderStatus(isConnected) {\n    return (\n      <Container>\n        <Row className=\"justify-content-center\">\n          <h4>Status</h4>\n        </Row>\n        <Row className=\"justify-content-center mb-1\">\n          <Badge variant={isConnected ? 'success' : 'danger'}>\n            {isConnected ? 'Connected' : 'Disconnnected'}\n          </Badge>\n        </Row>\n        <Row className=\"justify-content-center mb-1\">\n          <Badge variant={statusVariants[this.state.status]}>\n            {statusTexts[this.state.status]}\n          </Badge>\n        </Row>\n        <ProgressBar\n          className=\"mb-1\"\n          variant={statusVariants[this.state.status]}\n          now={this.state.progress}\n          animated={this.state.progress < 100}\n          label={`${_.floor(this.state.progress)}%`}\n        />\n        <hr />\n        <StatusInput ref={this.statusInputs.volumeDispensed} label=\"Volume Dispensed\" />\n        <StatusInput ref={this.statusInputs.timeElapsed} label=\"Time Elapsed\" />\n        <StatusInput ref={this.statusInputs.tubeNumber} label=\"Tube Number\" />\n        <Row>\n          <Col style={{color: 'red'}}>{this.state.statusError}</Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  // Render stuff that doesn't need to be placed anywhere, like modals.\n  renderOther() {\n    return (\n      <>\n        <NotSupportedModal ref={this.notSupportedModal} />\n      </>\n    )\n  }\n\n  render() {\n    const isConnected = this.state.connected;\n    return (\n      <>\n        <Container>\n          {this.props.development && <Alert variant=\"warning\">\n            <p>DEVELOPMENT MODE</p>\n          <Form.Group>\n            <Row>\n              <Col className=\"col-7\">\n                <Form.Control\n                  value={this.state.devCommand}\n                  onChange={event => this.setState({devCommand: event.target.value})}\n                  placeholder=\"Command\"\n                />\n              </Col>\n              <Col>\n                <Button\n                  onClick={() => this.send(this.state.devCommand)}\n                  disabled={!isConnected}\n                >Send</Button>\n              </Col>\n            </Row>\n          </Form.Group>\n          </Alert>}\n          <Row className=\"mb-5\">\n            <Col className=\"col-3\">\n              <Button\n                className=\"btn-block\"\n                variant=\"primary\"\n                onClick={isConnected ? this.disconnect : this.connect}\n                disabled={!webSerialSupported || this.state.connecting}\n              >{this.state.connecting\n                  ? 'Connecting...'\n                  : isConnected\n                    ? 'Disconnect'\n                    : 'Connect'\n                }</Button>\n            </Col>\n            <Col style={{color: 'red'}}>\n              {this.state.connectError}\n            </Col>\n          </Row>\n          <Row>\n            <Col className=\"col-9 mr-4\">\n              <Row>{this.renderInputs(isConnected)}</Row>\n            </Col>\n            <Col>\n              <Row>{this.renderStatus(isConnected)}</Row>\n            </Col>\n          </Row>\n        </Container>\n\n        {this.renderOther()}\n      </>\n    );\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\nimport {\n  Container,\n  Navbar,\n} from 'react-bootstrap';\nimport './bootstrap.min.css';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport queryString from 'query-string';\n\nimport { ColosseumUI } from './ColosseumUI';\n\nconst urlParams = queryString.parse(window.location.search);\nconst isDevelopment = _.has(urlParams, 'dev');\nconst isConnected = _.has(urlParams, 'connected');\n\nclass App extends React.Component {\n  componentDidMount() {\n    document.title = 'Colosseum UI';\n  }\n\n  render() {\n    return (\n      <>\n        <Container className=\"mb-4\">\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand>Colosseum UI</Navbar.Brand>\n            <Navbar.Collapse className=\"justify-content-end\">\n              <Navbar.Text className=\"mr-3\">\n                <FontAwesomeIcon icon={faGithub} className=\"mr-1\"/>\n                <a href=\"https://github.com/pachterlab/colosseum\">pachterlab/colosseum</a>\n              </Navbar.Text>\n              <Navbar.Text>\n                doi: <a href=\"https://doi.org/10.1101/2021.01.27.428538\">10.1101/2021.01.27.428538</a>\n              </Navbar.Text>\n            </Navbar.Collapse>\n          </Navbar>\n        </Container>\n        <Container className=\"w-75\">\n          <ColosseumUI development={isDevelopment} connected={isConnected}/>\n        </Container>\n      </>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();\n"],"sourceRoot":""}